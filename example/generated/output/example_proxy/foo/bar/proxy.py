"""
Generated by open_horadric. DO NOT EDIT!
"""

from __future__ import annotations

from typing import List
import logging

from flask import request as flask_request
from flask.wrappers import Request as FlaskRequest
from open_horadric_lib.base.context import Context
from open_horadric_lib.proxy.decorator.signature_types import signature_types
from open_horadric_lib.proxy.error_processor import ErrorProcessor
from open_horadric_lib.proxy.middleware.base import apply_middlewares
from open_horadric_lib.proxy.middleware.base import BaseProxyMiddleware
from open_horadric_lib.proxy.proxy import BaseProxy
import flask

from example_py3.foo.bar.client import TestServiceClient
from example_py3.foo.bar.messages import TestMessage
import example_py3.google.protobuf.messages


class TestServiceProxy(BaseProxy):
    """
    Proxy-converter to grpc for example_proxy.foo.bar.proxy.TestService.
    """
    logger = logging.getLogger('example_proxy.foo.bar.proxy.TestService')

    def test_method(
            self,
            request: TestMessage,
            context: Context,
    ) -> TestMessage.TestNestedMessage:
        return self.client.test_method(request)

    def client_streaming(
            self,
            request: TestMessage,
            context: Context,
    ) -> TestMessage.TestNestedMessage:
        return self.client.client_streaming(request)

    def server_streaming(
            self,
            request: TestMessage,
            context: Context,
    ) -> TestMessage.TestNestedMessage:
        return self.client.server_streaming(request)

    def client_server_streaming(
            self,
            request: TestMessage.TestNestedMessage,
            context: Context,
    ) -> TestMessage.TestNestedMessage:
        return self.client.client_server_streaming(request)

    def empty_method(
            self,
            request: example_py3.google.protobuf.messages.Empty,
            context: Context,
    ) -> example_py3.google.protobuf.messages.Empty:
        return self.client.empty_method(request)

    @signature_types(TestMessage, TestMessage.TestNestedMessage)
    def _test_method(self, request: FlaskRequest, context: Context) -> TestMessage.TestNestedMessage:
        try:
            request = self.protocol_parser.get_request(request=request, context=context)
            response = self.test_method(request=request, context=context)
            return self.protocol_adapter.make_response(response=response, context=context)
        except Exception as exception:
            return self.error_processor.process_error(exception=exception, context=context)

    @signature_types(TestMessage, TestMessage.TestNestedMessage)
    def _client_streaming(self, request: FlaskRequest, context: Context) -> TestMessage.TestNestedMessage:
        try:
            request = self.protocol_parser.get_request(request=request, context=context)
            response = self.client_streaming(request=request, context=context)
            return self.protocol_adapter.make_response(response=response, context=context)
        except Exception as exception:
            return self.error_processor.process_error(exception=exception, context=context)

    @signature_types(TestMessage, TestMessage.TestNestedMessage)
    def _server_streaming(self, request: FlaskRequest, context: Context) -> TestMessage.TestNestedMessage:
        try:
            request = self.protocol_parser.get_request(request=request, context=context)
            response = self.server_streaming(request=request, context=context)
            return self.protocol_adapter.make_response(response=response, context=context)
        except Exception as exception:
            return self.error_processor.process_error(exception=exception, context=context)

    @signature_types(TestMessage.TestNestedMessage, TestMessage.TestNestedMessage)
    def _client_server_streaming(self, request: FlaskRequest, context: Context) -> TestMessage.TestNestedMessage:
        try:
            request = self.protocol_parser.get_request(request=request, context=context)
            response = self.client_server_streaming(request=request, context=context)
            return self.protocol_adapter.make_response(response=response, context=context)
        except Exception as exception:
            return self.error_processor.process_error(exception=exception, context=context)

    @signature_types(example_py3.google.protobuf.messages.Empty, example_py3.google.protobuf.messages.Empty)
    def _empty_method(self, request: FlaskRequest, context: Context) -> example_py3.google.protobuf.messages.Empty:
        try:
            request = self.protocol_parser.get_request(request=request, context=context)
            response = self.empty_method(request=request, context=context)
            return self.protocol_adapter.make_response(response=response, context=context)
        except Exception as exception:
            return self.error_processor.process_error(exception=exception, context=context)

    def bind(self, app: flask.Flask):
        app.add_url_rule(
            rule='/foo.bar.TestService/TestMethod',
            view_func=apply_middlewares(self._test_method, *self.middlewares),
            methods=('POST', 'GET'),
            endpoint='foo.bar.TestService/TestMethod',
        )

        app.add_url_rule(
            rule='/foo.bar.TestService/ClientStreaming',
            view_func=apply_middlewares(self._client_streaming, *self.middlewares),
            methods=('POST', 'GET'),
            endpoint='foo.bar.TestService/ClientStreaming',
        )

        app.add_url_rule(
            rule='/foo.bar.TestService/ServerStreaming',
            view_func=apply_middlewares(self._server_streaming, *self.middlewares),
            methods=('POST', 'GET'),
            endpoint='foo.bar.TestService/ServerStreaming',
        )

        app.add_url_rule(
            rule='/foo.bar.TestService/ClientServerStreaming',
            view_func=apply_middlewares(self._client_server_streaming, *self.middlewares),
            methods=('POST', 'GET'),
            endpoint='foo.bar.TestService/ClientServerStreaming',
        )

        app.add_url_rule(
            rule='/foo.bar.TestService/EmptyMethod',
            view_func=apply_middlewares(self._empty_method, *self.middlewares),
            methods=('POST', 'GET'),
            endpoint='foo.bar.TestService/EmptyMethod',
        )

