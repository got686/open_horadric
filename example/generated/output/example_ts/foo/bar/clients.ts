// Generated by open_horadric. DO NOT EDIT!

import { AxiosInstance } from 'axios'
import { AxiosResponse } from 'axios'

import * as example_ts from 'example_ts'
import { ITestMessage } from './interfaces'
import { TestMessage } from './messages'
import { TestMessage__ITestNestedMessage } from './interfaces'


export class TestServiceClient {
    public httpClient: AxiosInstance

    public constructor(httpClient: AxiosInstance) {
        this.httpClient = httpClient
    }

    public TestMethod(request: ITestMessage): Promise<TestMessage__ITestNestedMessage> {
        return this.httpClient.post('/foo.bar.TestService/TestMethod', request)
            .then((response: AxiosResponse) => TestMessage.TestNestedMessage.FromData(response.data))
    }

    public ClientStreaming(request: ITestMessage): Promise<TestMessage__ITestNestedMessage> {
        return this.httpClient.post('/foo.bar.TestService/ClientStreaming', request)
            .then((response: AxiosResponse) => TestMessage.TestNestedMessage.FromData(response.data))
    }

    public ServerStreaming(request: ITestMessage): Promise<TestMessage__ITestNestedMessage> {
        return this.httpClient.post('/foo.bar.TestService/ServerStreaming', request)
            .then((response: AxiosResponse) => TestMessage.TestNestedMessage.FromData(response.data))
    }

    public ClientServerStreaming(request: TestMessage__ITestNestedMessage): Promise<TestMessage__ITestNestedMessage> {
        return this.httpClient.post('/foo.bar.TestService/ClientServerStreaming', request)
            .then((response: AxiosResponse) => TestMessage.TestNestedMessage.FromData(response.data))
    }

    public EmptyMethod(request: example_ts.google.protobuf.interfaces.IEmpty): Promise<example_ts.google.protobuf.interfaces.IEmpty> {
        return this.httpClient.post('/foo.bar.TestService/EmptyMethod', request)
            .then((response: AxiosResponse) => example_ts.google.protobuf.messages.Empty.FromData(response.data))
    }
}

