{% extends "base.jinja2" %}

{% macro render_service(service) %}


class {{ service.class_name }}(BaseProxy):
    """
    Proxy-converter to grpc for {{ service.full_name }}.
    """
    logger = logging.getLogger('{{ service.full_name }}')
    {% if service.methods %}
        {% for method in service.methods.values() %}

    def {{ to_snake_case(method.name) -}}(
            self,
            request: {{ method.input_string }},
            context: Context,
    ) -> {{ method.output_string }}:
        return self.client.{{ to_snake_case(method.name) }}(request)
        {% endfor %}
        {% for method in service.methods.values() %}

    @signature_types({{ method.input_string }}, {{ method.output_string }})
    def _{{ to_snake_case(method.name) -}}(self, request: FlaskRequest, context: Context) -> {{ method.output_string  }}:
        try:
            request = self.protocol_adapter.get_request(request=request, context=context)
            response = self.{{ to_snake_case(method.name) }}(request=request, context=context)
            return self.protocol_adapter.make_response(response=response, context=context)
        except Exception as exception:
            return self.error_processor.process_error(exception=exception, context=context)
        {% endfor %}

    def bind(self, app: flask.Flask):
        {% for method in service.methods.values() %}
            {% if not loop.first %}

            {% endif %}
        app.add_url_rule(
            rule='/{{ service.no_root_name }}/{{ method.name }}',
            view_func=apply_middlewares(self._{{ to_snake_case(method.name) }}, *self.middlewares),
            methods=('POST', 'GET'),
            endpoint='{{ service.no_root_name }}/{{ method.name }}',
        )
        {% endfor %}
    {% endif %}
{% endmacro %}

{% block code %}
{% for servcice in services.values() %}
{{ render_service(servcice) }}
{% endfor %}
{% endblock %}
